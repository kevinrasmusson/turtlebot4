import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from nav2_msgs.action import ComputePathToPose
from nav2_msgs.action import NavigateToPose

class ComputePathListener(Node):
    def __init__(self):
        super().__init__('navigate_to_pose_listener')

        # Create an Action Client to listen for ComputePathToPose results
        self._action_client = ActionClient(self, NavigateToPose, '/turtle/navigate_to_pose')

        self.get_logger().info("Waiting for /turtle/navigate_to_pose action server...")
        self._action_client.wait_for_server(timeout_sec=10.0)  # Avoid infinite wait

        self.get_logger().info("Listening for computed paths on /turtle/navigate_to_pose.")

        # Start monitoring for path computation results
        self.monitor_navigation()

    def monitor_navigation(self):
        """ Monitors and listens for path computation results. """
        future = self._action_client.get_result_async()
        future.add_done_callback(self.navigation_result_callback)

    def navigation_result_callback(self, future):
        """ Callback triggered when a path computation is completed. """
        try:
            result = future.result().result
            navigation_time = result.navigation_time

            self.get_logger().info(f"Navigation completed! Time: {navigation_time.sec} seconds and {navigation_time.nanosec} nanoseconds")

        except Exception as e:
            self.get_logger().error(f"⚠️ Error receiving navigation result: {str(e)}")

        
    def goal_response_callback(self, future):
        """ Callback triggered when a goal is accepted or rejected. """
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().error('Goal rejected :(')
            return

        self.get_logger().info('Goal accepted :)')
        self.monitor_navigation(goal_handle)

def main(args=None):
    rclpy.init(args=args)
    node = ComputePathListener()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
