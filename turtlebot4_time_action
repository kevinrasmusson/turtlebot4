import rclpy
from rclpy.node import Node
from rclpy.action import ActionServer
from nav2_msgs.action import ComputePathToPose

class ComputePathListener(Node):
    def __init__(self):
        super().__init__('compute_path_listener')

        # Create an action server to listen for ComputePathToPose results
        self._action_server = ActionServer(
            self,
            ComputePathToPose,
            '/turtle/compute_path_to_pose',
            execute_callback=self.compute_path_callback)

        self.get_logger().info("Listening for computed paths on /turtle/compute_path_to_pose.")

    async def compute_path_callback(self, goal_handle):
        """ Callback triggered when a path computation is completed. """
        # Access the result from the goal_handle
        result = goal_handle.get_result_async()

        # Wait for the result to be available
        rclpy.spin_until_future_complete(self, result)

        # Print the actual planning time
        planning_seconds = result.result().planning_time.sec + result.result().planning_time.nanosec * 1e-9
        self.get_logger().info(f"Path planning time: {planning_seconds:.3f} sec")

        goal_handle.succeed()
        return result.result()

def main(args=None):
    rclpy.init(args=args)
    node = ComputePathListener()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
