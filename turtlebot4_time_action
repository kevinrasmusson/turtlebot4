import rclpy
from rclpy.node import Node
from rclpy.action import ActionServer
from nav2_msgs.action import NavigateToPose, ComputePathToPose
from geometry_msgs.msg import PoseStamped


class NavigationListener(Node):
    def __init__(self):
        super().__init__('navigation_listener')

        # Action server for NavigateToPose
        self._navigate_action_server = ActionServer(
            self,
            NavigateToPose,
            '/turtle/navigate_to_pose',
            execute_callback=self.navigate_callback)
        
        # Action server for ComputePathToPose
        self._compute_path_action_server = ActionServer(
            self,
            ComputePathToPose,
            '/turtle/compute_path_to_pose',
            execute_callback=self.compute_path_callback)

        self.get_logger().info("Navigation listener started for namespace /turtle.")

    async def navigate_callback(self, goal_handle):
        """Callback for when a new NavigateToPose goal is received."""
        goal = goal_handle.request.pose
        self.get_logger().info(f"New navigation goal received: {goal.pose.position}")
        
        # Return an empty result since we only listen
        result = NavigateToPose.Result()
        goal_handle.succeed()
        return result

    async def compute_path_callback(self, goal_handle):
        """Callback for when a new ComputePathToPose goal is received."""
        goal = goal_handle.request.goal
        self.get_logger().info(f"Path computed to goal: {goal.pose.position}")

        # Return an empty result since we only listen
        result = ComputePathToPose.Result()
        goal_handle.succeed()
        return result


def main(args=None):
    rclpy.init(args=args)
    node = NavigationListener()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
